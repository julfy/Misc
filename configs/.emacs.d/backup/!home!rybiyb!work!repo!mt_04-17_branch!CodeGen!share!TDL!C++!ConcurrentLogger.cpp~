#include "ConcurrentLogger.hpp"
#include <sys/time.h>

namespace TDL {
    namespace MTLogging{

        ConcurrentLogger :: ConcurrentLogger () { }

        ConcurrentLogger* ConcurrentLogger :: getInstance (std::ostream* stream) {
            static bool created = false;
            static ConcurrentLogger* instance;
            if (created == false) {
                instance = new ConcurrentLogger();
                instance->output_stream = stream;
                sem_init(&(instance->sem), 0, 1);
                instance->msgNum = 0;
                instance->queue.str("");
                created = true;
            }
            return instance;
        }
        
        void ConcurrentLogger :: output (std::string value) {
            std::cout << "outin" << std::endl;
            bool dumpFlag;
            sem_wait(&sem);
            queue << value;
            msgNum++;
            dumpFlag = false;
            if (msgNum > minMsgNum){
                msgNum = 0;
                dumpFlag = true;
            }
            sem_post(&sem);
            if (dumpFlag)
                dumpMessages();
            std::cout << "outend" << std::endl;
        }
        
        void ConcurrentLogger :: logMessage (std::string value) {
            std::cout << "login" << std::endl;
            static struct timeval tv;
            gettimeofday(&tv,NULL);
            std::stringstream* tmp = new std::stringstream();
            (*tmp) << (unsigned long long)(1000000 * tv.tv_sec + tv.tv_usec) //((std::chrono::duration_cast<std::chrono::nanoseconds>) (std::chrono::high_resolution_clock::now())).count()
                   << " : "
                   << value
                   << std::endl;
            output(tmp->str());
            delete tmp;
            std::cout << "logend" << std::endl;
        }

        void ConcurrentLogger :: dumpMessages () {
            std::cout << "dumpin" << queue.str() << std::endl;
            sem_wait(&sem);
            try {
                (*output_stream) << queue.str();
                output_stream->flush();
            } catch (const std::exception &e) {
                std::cerr << "Exception while writing log message: " << queue.str()
                          << "Exception is: " << e.what() << std::endl;
            }
            queue.str("");
            sem_post(&sem);
            std::cout << "dumpend" << std::endl;
        }

        ConcurrentLogger :: ~ConcurrentLogger () {
            std::cout << "delin" << std::endl;
            dumpMessages();
            delete output_stream;
            output_stream = NULL;
            sem_destroy(&(this->sem));
            std::cout << "delend" << std::endl;
        }
    }
}
